#User function Template for python3

'''

class Node:
    def __init__(self, data):   # data -> value stored in node
        self.data = data
        self.next = None
'''

class Solution:
    def addOne(self,head):
        #Returns new head of linked List.
        
        
        def reverseLL(head):
            prev,cur=None,head 
            while (cur is not None):
                nxt=cur.next 
                cur.next=prev 
                prev=cur 
                cur=nxt 
            head=prev 
            return head
       
        head=reverseLL(head)
        
        cur=head 
        cur_sum=cur.data+1
        carry=0
        if cur_sum>9:
            carry=cur_sum//10
            cur_sum=cur_sum%10
            cur.data=cur_sum 
            
        else:
            cur.data=cur_sum 
            head=reverseLL(head)
            return head 
        
        prev,cur=cur,cur.next
        
        while (cur is not None):
            cur_sum=cur.data+carry 
            if cur_sum>9:
                
                carry=cur_sum//10
                cur_sum=cur_sum%10
                cur.data=cur_sum 
            else:
                cur.data=cur_sum 
                carry=0
            prev=cur
            cur=cur.next
           
        if carry>0 :
            prev.next=Node(carry)
        head=reverseLL(head)
        
        return head
                
            
            


#{ 
 # Driver Code Starts
#Initial Template for Python 3

# Node Class
class Node:
    def __init__(self, data):   # data -> value stored in node
        self.data = data
        self.next = None

# Linked List Class
class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    # creates a new node with given value and appends it at the end of the linked list
    def insert(self, value):
        if self.head is None:
            self.head = Node(value)
            self.tail = self.head
        else:
            self.tail.next = Node(value)
            self.tail = self.tail.next

def PrintList(head):
    while head:
        print(head.data,end='')
        head = head.next

if __name__ == '__main__':
    t=int(input())
    for _ in range(t):
        
        num = input()
        ll = LinkedList() # create a new linked list 'll1'.
        for digit in num:
            ll.insert(int(digit))  # add to the end of the list
        
        resHead = Solution().addOne(ll.head)
        PrintList(resHead)
        print()


# } Driver Code Ends
